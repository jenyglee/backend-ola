name: Deploy to Amazon EC2

on:
  push:
    branches:
      - main2

# 본인이 설정한 값을 여기서 채워넣습니다.
# 리전, 버킷 이름, CodeDeploy 앱 이름, CodeDeploy 배포 그룹 이름
env:
  AWS_REGION: ap-northeast-2
  S3_BUCKET_NAME: sparta-ola-github-action
  CODE_DEPLOY_APPLICATION_NAME: ola-codedeploy-app
  CODE_DEPLOY_DEPLOYMENT_GROUP_NAME: ola-codedeploy-deployment-group

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    # (1) 기본 체크아웃
    - name: Checkout
      uses: actions/checkout@v3

    # (2) JDK 17 세팅
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'

    #1
    # 해당 부분은 상당히 중요함 (글에서 부가설명)
    # application.properties는 외부에 노출되면 안되므로 Actions가 빌드될때마다 해당 Repository의 Secret 설정을
    # 이용하여서 설정 파일을 생성해줌 (github에 commit 되는게 아님!)
    - run : touch ./back/src/main/resources/application.yml
    - run : echo "${{ secrets.APPLICATION }}" > ./back/src/main/resources/application.yml
    - run : cat ./back/src/main/resources/application.yml    
        
        
#     # (3-1) yml 세팅
#     - name: Set yaml file
#       uses: microsoft/variable-substitution@v1
#       with:
#         files: ${{ secrets.APPLiCATION }}
#       env:
#         cloud.aws.credentials.accessKey: ${{ secrets.IMAGE_S3_ACCESS_KEY_ID }}
#         cloud.aws.credentials.secretKey: ${{ secrets.IMAGE_S3_SECRET_ACCESS_KEY}}
#         #jwt.secret.key: $ {{ secrets.JWT_SECRET_KEY }}
#         spring.datasource.password: ${{ secrets.MYSQL_PASSWORD }}

    # (3) Gradle build (Test 제외)
    - name: Build with Gradle
      run: cd back && ./gradlew clean build -x test
#     - run: ./gradlew clean build -x test
#       uses: gradle/gradle-build-action@0d13054264b0bb894ded474f08ebb30921341cee
#       with:
#         arguments: clean build -x test

    # (4) AWS 인증 (IAM 사용자 Access Key, Secret Key 활용)
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # (5) 빌드 결과물을 S3 버킷에 업로드
    - name: Upload to AWS S3
    
      run: |
        aws deploy push \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --ignore-hidden-files \
          --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
          --source .
      working-directory: ./back
        
#     초기 상태
#     run: |
#       aws deploy push \
#         --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
#         --ignore-hidden-files \
#         --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
#         --source .

        
#       run: cd back && aws deploy push
#         --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
#         --ignore-hidden-files \
#         --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
#         --source .


#       run: |
#         cd back \
#         aws deploy push \
#           --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
#           --ignore-hidden-files \
#           --s3-location s3://$S3_BUCKET_NAME/$GITHUB_SHA.zip \
#           --source .
    # (6) S3 버킷에 있는 파일을 대상으로 CodeDeploy 실행
    - name: Deploy to AWS EC2 from S3
      run: |
        aws deploy create-deployment \
          --application-name ${{ env.CODE_DEPLOY_APPLICATION_NAME }} \
          --deployment-config-name CodeDeployDefault.AllAtOnce \
          --deployment-group-name ${{ env.CODE_DEPLOY_DEPLOYMENT_GROUP_NAME }} \
          --s3-location bucket=$S3_BUCKET_NAME,key=$GITHUB_SHA.zip,bundleType=zip
